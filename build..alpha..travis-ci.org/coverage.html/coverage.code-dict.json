{"/home/travis/build/npmtest/node-npmtest-ember-pouch/test.js":"/* istanbul instrument in package npmtest_ember_pouch */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-pouch/lib.npmtest_ember_pouch.js":"/* istanbul instrument in package npmtest_ember_pouch */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ember_pouch = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ember_pouch = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-pouch/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ember-pouch && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ember_pouch */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ember_pouch\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ember_pouch.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ember_pouch.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ember_pouch.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ember_pouch.__dirname + '/lib.npmtest_ember_pouch.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-pouch/node_modules/ember-pouch/index.js":"/* jshint node: true, -W030 */\n'use strict';\n\nvar path = require('path');\nvar stew = require('broccoli-stew');\n\nmodule.exports = {\n  name: 'ember-pouch',\n\n  init: function() {\n    this._super.init && this._super.init.apply(this, arguments);\n\n    var bowerDeps = this.project.bowerDependencies();\n\n    if (bowerDeps['pouchdb']) {this.ui.writeWarnLine('Please remove `pouchdb` from `bower.json`. As of ember-pouch 4.2.0, only the NPM package is needed.');}\n    if (bowerDeps['relational-pouch']) {this.ui.writeWarnLine('Please remove `relational-pouch` from `bower.json`. As of ember-pouch 4.2.0, only the NPM package is needed.');}\n    if (bowerDeps['pouchdb-find']) {this.ui.writeWarnLine('Please remove `pouchdb-find` from `bower.json`. As of ember-pouch 4.2.0, only the NPM package is needed.');}\n  },\n\n  treeForVendor: function() {\n    var pouchdb = stew.find(path.join(path.dirname(require.resolve('pouchdb')), '..', 'dist'), {\n      destDir: 'pouchdb',\n      files: ['pouchdb.js']\n    });\n\n    var relationalPouch = stew.find(path.join(path.dirname(require.resolve('relational-pouch')), '..', 'dist'), {\n      destDir: 'pouchdb',\n      files: ['pouchdb.relational-pouch.js']\n    });\n\n    var pouchdbFind = stew.find(path.join(path.dirname(require.resolve('pouchdb-find')), '..', 'dist'), {\n      destDir: 'pouchdb',\n      files: ['pouchdb.find.js']\n    });\n\n    var shims = stew.find(__dirname + '/vendor/pouchdb', {\n      destDir: 'pouchdb',\n      files: ['shims.js']\n    });\n\n    return stew.find([\n      pouchdb,\n      relationalPouch,\n      pouchdbFind,\n      shims\n    ]);\n  },\n\n  included(app) {\n    app.import('vendor/pouchdb/pouchdb.js');\n    app.import('vendor/pouchdb/pouchdb.relational-pouch.js');\n    app.import('vendor/pouchdb/pouchdb.find.js');\n    app.import('vendor/pouchdb/shims.js', {\n      exports: { 'pouchdb': [ 'default' ]}\n    });\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-ember-pouch/node_modules/ember-pouch/addon/model.js":"import DS from 'ember-data';\n\nconst {\n  Model,\n  attr\n} = DS;\n\nexport default Model.extend({\n  rev: attr('string')\n});","/home/travis/build/npmtest/node-npmtest-ember-pouch/node_modules/ember-pouch/addon/utils.js":"// ember-data doesn't like getting a json response of {deleted: true}\nfunction extractDeleteRecord() {\n  return null;\n}\n\nexport { extractDeleteRecord };","/home/travis/build/npmtest/node-npmtest-ember-pouch/node_modules/ember-pouch/config/environment.js":"/*jshint node:true*/\n'use strict';\n\nmodule.exports = function(/* environment, appConfig */) {\n  return { };\n};\n","/home/travis/build/npmtest/node-npmtest-ember-pouch/node_modules/ember-pouch/addon/adapters/pouch.js":"import Ember from 'ember';\nimport DS from 'ember-data';\nimport getOwner from 'ember-getowner-polyfill';\n\nimport {\n  extractDeleteRecord\n} from '../utils';\n\nconst {\n  run: {\n    bind\n  },\n  on,\n  String: {\n    pluralize,\n    camelize,\n    classify\n  }\n} = Ember;\n\nexport default DS.RESTAdapter.extend({\n  coalesceFindRequests: true,\n\n  // The change listener ensures that individual records are kept up to date\n  // when the data in the database changes. This makes ember-data 2.0's record\n  // reloading redundant.\n  shouldReloadRecord: function () { return false; },\n  shouldBackgroundReloadRecord: function () { return false; },\n  _onInit : on('init', function()  {\n    this._startChangesToStoreListener();\n  }),\n  _startChangesToStoreListener: function () {\n    var db = this.get('db');\n    if (db) {\n      this.changes = db.changes({\n        since: 'now',\n        live: true,\n        returnDocs: false\n      }).on('change', bind(this, 'onChange'));\n    }\n  },\n  changeDb: function(db) {\n    if (this.changes) {\n      this.changes.cancel();\n    }\n\n    var store = this.store;\n    var schema = this._schema || [];\n\n    for (var i = 0, len = schema.length; i < len; i++) {\n      store.unloadAll(schema[i].singular);\n    }\n\n    this._schema = null;\n    this.set('db', db);\n    this._startChangesToStoreListener();\n  },\n  onChange: function (change) {\n    // If relational_pouch isn't initialized yet, there can't be any records\n    // in the store to update.\n    if (!this.get('db').rel) { return; }\n\n    var obj = this.get('db').rel.parseDocID(change.id);\n    // skip changes for non-relational_pouch docs. E.g., design docs.\n    if (!obj.type || !obj.id || obj.type === '') { return; }\n\n    var store = this.store;\n\n    try {\n      store.modelFor(obj.type);\n    } catch (e) {\n      // The record refers to a model which this version of the application\n      // does not have.\n      return;\n    }\n\n    var recordInStore = store.peekRecord(obj.type, obj.id);\n    if (!recordInStore) {\n      // The record hasn't been loaded into the store; no need to reload its data.\n      this.unloadedDocumentChanged(obj);\n      return;\n    }\n    if (!recordInStore.get('isLoaded') || recordInStore.get('hasDirtyAttributes')) {\n      // The record either hasn't loaded yet or has unpersisted local changes.\n      // In either case, we don't want to refresh it in the store\n      // (and for some substates, attempting to do so will result in an error).\n      return;\n    }\n\n    if (change.deleted) {\n      store.unloadRecord(recordInStore);\n    } else {\n      recordInStore.reload();\n    }\n  },\n\n  unloadedDocumentChanged: function(/* obj */) {\n    /*\n     * For performance purposes, we don't load records into the store that haven't previously been loaded.\n     * If you want to change this, subclass this method, and push the data into the store. e.g.\n     *\n     *  let store = this.get('store');\n     *  let recordTypeName = this.getRecordTypeName(store.modelFor(obj.type));\n     *  this.get('db').rel.find(recordTypeName, obj.id).then(function(doc){\n     *    store.pushPayload(recordTypeName, doc);\n     *  });\n     */\n  },\n\n  willDestroy: function() {\n    if (this.changes) {\n      this.changes.cancel();\n    }\n  },\n\n  _init: function (store, type) {\n    var self = this,\n        recordTypeName = this.getRecordTypeName(type);\n    if (!this.get('db') || typeof this.get('db') !== 'object') {\n      throw new Error('Please set the `db` property on the adapter.');\n    }\n\n    if (!Ember.get(type, 'attributes').has('rev')) {\n      var modelName = classify(recordTypeName);\n      throw new Error('Please add a `rev` attribute of type `string`' +\n        ' on the ' + modelName + ' model.');\n    }\n\n    this._schema = this._schema || [];\n\n    var singular = recordTypeName;\n    var plural = pluralize(recordTypeName);\n\n    // check that we haven't already registered this model\n    for (var i = 0, len = this._schema.length; i < len; i++) {\n      var currentSchemaDef = this._schema[i];\n      if (currentSchemaDef.singular === singular) {\n        return;\n      }\n    }\n\n    var schemaDef = {\n      singular: singular,\n      plural: plural\n    };\n\n    if (type.documentType) {\n      schemaDef['documentType'] = type.documentType;\n    }\n    \n    let config = getOwner(this).resolveRegistration('config:environment');\n    let dontsavedefault = config['emberpouch'] && config['emberpouch']['dontsavehasmany'];\n    // else it's new, so update\n    this._schema.push(schemaDef);\n    // check all the subtypes\n    // We check the type of `rel.type`because with ember-data beta 19\n    // `rel.type` switched from DS.Model to string\n    type.eachRelationship(function (_, rel) {\n      if (rel.kind !== 'belongsTo' && rel.kind !== 'hasMany') {\n        // TODO: support inverse as well\n        return; // skip\n      }\n      var relDef = {},\n          relModel = (typeof rel.type === 'string' ? store.modelFor(rel.type) : rel.type);\n      if (relModel) {\n      \tlet includeRel = true;\n      \trel.options = rel.options || {};\n      \tif (typeof(rel.options.async) === \"undefined\") {\n      \t\trel.options.async = config.emberpouch && !Ember.isEmpty(config.emberpouch.async) ? config.emberpouch.async : true;//default true from https://github.com/emberjs/data/pull/3366\n      \t}\n      \tlet options = Object.create(rel.options);\n        if (rel.kind === 'hasMany' && (options.dontsave || typeof(options.dontsave) === 'undefined' && dontsavedefault)) {\n        \tlet inverse = type.inverseFor(rel.key, store);\n        \tif (inverse) {\n\t        \tif (inverse.kind === 'belongsTo') {\n\t        \t\tself.get('db').createIndex({index: { fields: ['data.' + inverse.name, '_id'] }});\t\n\t        \t\tif (options.async) {\n\t        \t\t\tincludeRel = false;\n\t        \t\t} else {\n\t        \t\t\toptions.queryInverse = inverse.name;\n\t        \t\t}\n\t        \t} else {\n\t        \t\tconsole.warn(type.modelName + \" has a relationship with name \" + rel.key + \" that is many to many with type \" + rel.type + \". This is not supported\");\n\t        \t}\n\t        } else {\n\t        \tconsole.warn(type.modelName + \" has a hasMany relationship with name \" + rel.key + \" that has no inverse.\");\n\t        }\n        }\n        \n        if (includeRel) {\n\t        relDef[rel.kind] = {\n\t          type: self.getRecordTypeName(relModel),\n\t          options: options\n\t        };\n\t        if (!schemaDef.relations) {\n\t          schemaDef.relations = {};\n\t        }\n\t        schemaDef.relations[rel.key] = relDef;\n\t    }\n        self._init(store, relModel);\n      }\n    });\n\n    this.get('db').setSchema(this._schema);\n  },\n\n  _recordToData: function (store, type, record) {\n    var data = {};\n    // Though it would work to use the default recordTypeName for modelName &\n    // serializerKey here, these uses are conceptually distinct and may vary\n    // independently.\n    var modelName = type.modelName || type.typeKey;\n    var serializerKey = camelize(modelName);\n    var serializer = store.serializerFor(modelName);\n\n    serializer.serializeIntoHash(\n      data,\n      type,\n      record,\n      {includeId: true}\n    );\n\n    data = data[serializerKey];\n\n    // ember sets it to null automatically. don't need it.\n    if (data.rev === null) {\n      delete data.rev;\n    }\n\n    return data;\n  },\n\n  /**\n   * Return key that conform to data adapter\n   * ex: 'name' become 'data.name'\n   */\n  _dataKey: function(key) {\n    var dataKey ='data.' + key;\n    return \"\"+ dataKey + \"\";\n  },\n\n  /**\n   * Returns the modified selector key to comform data key\n   * Ex: selector: {name: 'Mario'} wil become selector: {'data.name': 'Mario'}\n   */\n  _buildSelector: function(selector) {\n    var dataSelector = {};\n    var selectorKeys = [];\n\n    for (var key in selector) {\n      if(selector.hasOwnProperty(key)){\n        selectorKeys.push(key);\n      }\n    }\n\n    selectorKeys.forEach(function(key) {\n      var dataKey = this._dataKey(key);\n      dataSelector[dataKey] = selector[key];\n    }.bind(this));\n\n    return dataSelector;\n  },\n\n  /**\n   * Returns the modified sort key\n   * Ex: sort: ['series'] will become ['data.series']\n   * Ex: sort: [{series: 'desc'}] will became [{'data.series': 'desc'}]\n   */\n  _buildSort: function(sort) {\n    return sort.map(function (value) {\n      var sortKey = {};\n      if (typeof value === 'object' && value !== null) {\n        for (var key in value) {\n          if(value.hasOwnProperty(key)){\n            sortKey[this._dataKey(key)] = value[key];\n          }\n        }\n      } else {\n        return this._dataKey(value);\n      }\n      return sortKey;\n    }.bind(this));\n  },\n\n  /**\n   * Returns the string to use for the model name part of the PouchDB document\n   * ID for records of the given ember-data type.\n   *\n   * This method uses the camelized version of the model name in order to\n   * preserve data compatibility with older versions of ember-pouch. See\n   * nolanlawson/ember-pouch#63 for a discussion.\n   *\n   * You can override this to change the behavior. If you do, be aware that you\n   * need to execute a data migration to ensure that any existing records are\n   * moved to the new IDs.\n   */\n  getRecordTypeName(type) {\n    return camelize(type.modelName);\n  },\n\n  findAll: function(store, type /*, sinceToken */) {\n    // TODO: use sinceToken\n    this._init(store, type);\n    return this.get('db').rel.find(this.getRecordTypeName(type));\n  },\n\n  findMany: function(store, type, ids) {\n    this._init(store, type);\n    return this.get('db').rel.find(this.getRecordTypeName(type), ids);\n  },\n  \n  findHasMany: function(store, record, link, rel) {\n  \tlet inverse = record.type.inverseFor(rel.key, store);\n  \tif (inverse && inverse.kind === 'belongsTo') {\n  \t\treturn this.get('db').rel.findHasMany(camelize(rel.type), inverse.name, record.id);\n\t}\n\telse {\n\t\tconsole.warn(\"Can't find \" + rel.key);\n  \t\tlet result = {};\n  \t\tresult[pluralize(rel.type)] = [];\n  \t\treturn result;//data;\n  \t}\n  },\n\n  query: function(store, type, query) {\n    this._init(store, type);\n\n    var recordTypeName = this.getRecordTypeName(type);\n    var db = this.get('db');\n\n    var queryParams = {\n      selector: this._buildSelector(query.filter)\n    };\n\n    if (!Ember.isEmpty(query.sort)) {\n      queryParams.sort = this._buildSort(query.sort);\n    }\n\n    return db.find(queryParams).then(pouchRes => db.rel.parseRelDocs(recordTypeName, pouchRes.docs));\n  },\n\n  queryRecord: function(store, type, query) {\n    return this.query(store, type, query);\n  },\n\n  /**\n   * `find` has been deprecated in ED 1.13 and is replaced by 'new store\n   * methods', see: https://github.com/emberjs/data/pull/3306\n   * We keep the method for backward compatibility and forward calls to\n   * `findRecord`. This can be removed when the library drops support\n   * for deprecated methods.\n  */\n  find: function (store, type, id) {\n    return this.findRecord(store, type, id);\n  },\n\n  findRecord: function (store, type, id) {\n    this._init(store, type);\n    var recordTypeName = this.getRecordTypeName(type);\n    return this.get('db').rel.find(recordTypeName, id).then(function (payload) {\n      // Ember Data chokes on empty payload, this function throws\n      // an error when the requested data is not found\n      if (typeof payload === 'object' && payload !== null) {\n        var singular = recordTypeName;\n        var plural = pluralize(recordTypeName);\n\n        var results = payload[singular] || payload[plural];\n        if (results && results.length > 0) {\n          return payload;\n        }\n      }\n      throw new Error('Not found: type \"' + recordTypeName +\n        '\" with id \"' + id + '\"');\n    });\n  },\n\n  createRecord: function(store, type, record) {\n    this._init(store, type);\n    var data = this._recordToData(store, type, record);\n    return this.get('db').rel.save(this.getRecordTypeName(type), data);\n  },\n\n  updateRecord: function (store, type, record) {\n    this._init(store, type);\n    var data = this._recordToData(store, type, record);\n    return this.get('db').rel.save(this.getRecordTypeName(type), data);\n  },\n\n  deleteRecord: function (store, type, record) {\n    this._init(store, type);\n    var data = this._recordToData(store, type, record);\n    return this.get('db').rel.del(this.getRecordTypeName(type), data)\n      .then(extractDeleteRecord);\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-pouch/node_modules/ember-pouch/addon/serializers/pouch.js":"import Ember from 'ember';\nimport DS from 'ember-data';\nimport getOwner from 'ember-getowner-polyfill';\n\nconst {\n  get,\n} = Ember;\nconst keys = Object.keys || Ember.keys;\nconst assign = Object.assign || Ember.assign;\n\nexport default DS.RESTSerializer.extend({\n  \n  init: function() {\n  \tthis._super(...arguments);\n  \t\n    let config = getOwner(this).resolveRegistration('config:environment');\n  \tthis.dontsavedefault = config['emberpouch'] && config['emberpouch']['dontsavehasmany'];\n  },\n  \n  _getDontsave(relationship) {\n  \treturn !Ember.isEmpty(relationship.options.dontsave) ? relationship.options.dontsave : this.dontsavedefault;\n  },\n\n  _shouldSerializeHasMany: function(snapshot, key, relationship) {\n  \tlet dontsave = this._getDontsave(relationship);\n  \tlet result = !dontsave;\n    return result;\n  },\n\n  // This fixes a failure in Ember Data 1.13 where an empty hasMany\n  // was saving as undefined rather than [].\n  serializeHasMany(snapshot, json, relationship) {\n  \tif (this._shouldSerializeHasMany(snapshot, relationship.key, relationship)) {\n\t    this._super.apply(this, arguments);\n\t\n\t    const key = relationship.key;\n\t\n\t    if (!json[key]) {\n\t      json[key] = [];\n\t    }\n\t}\n  },\n\n  _isAttachment(attribute) {\n    return ['attachment', 'attachments'].indexOf(attribute.type) !== -1;\n  },\n\n  serializeAttribute(snapshot, json, key, attribute) {\n    this._super(snapshot, json, key, attribute);\n    if (this._isAttachment(attribute)) {\n      // if provided, use the mapping provided by `attrs` in the serializer\n      var payloadKey = this._getMappedKey(key, snapshot.type);\n      if (payloadKey === key && this.keyForAttribute) {\n        payloadKey = this.keyForAttribute(key, 'serialize');\n      }\n\n      // Merge any attachments in this attribute into the `attachments` property.\n      // relational-pouch will put these in the special CouchDB `_attachments` property\n      // of the document.\n      // This will conflict with any 'attachments' attr in the model. Suggest that\n      // #toRawDoc in relational-pouch should allow _attachments to be specified\n      json.attachments = assign({}, json.attachments || {}, json[payloadKey]); // jshint ignore:line\n      json[payloadKey] = keys(json[payloadKey]).reduce((attr, fileName) => {\n        attr[fileName] = assign({}, json[payloadKey][fileName]); // jshint ignore:line\n        delete attr[fileName].data;\n        delete attr[fileName].content_type;\n        return attr;\n      }, {});\n    }\n  },\n\n  extractAttributes(modelClass, resourceHash) {\n    let attributes = this._super(modelClass, resourceHash);\n    let modelAttrs = get(modelClass, 'attributes');\n    modelClass.eachTransformedAttribute(key => {\n      let attribute = modelAttrs.get(key);\n      if (this._isAttachment(attribute)) {\n        // put the corresponding _attachments entries from the response into the attribute\n        let fileNames = keys(attributes[key]);\n        fileNames.forEach(fileName => {\n          attributes[key][fileName] = resourceHash.attachments[fileName];\n        });\n      }\n    });\n    return attributes;\n  },\n  \n  extractRelationships(modelClass) {\n  \tlet relationships = this._super(...arguments);\n\n  \tmodelClass.eachRelationship((key, relationshipMeta) => {\n  \t  if (relationshipMeta.kind === 'hasMany' && this._getDontsave(relationshipMeta) && !!relationshipMeta.options.async) {\n  \t  \trelationships[key] = { links: { related: key } };\n  \t  }\n  \t});\n  \t\n  \treturn relationships;\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-pouch/node_modules/ember-pouch/addon/transforms/attachment.js":"import Ember from 'ember';\nimport AttachmentsTransform from './attachments';\n\nconst {\n  isNone\n} = Ember;\n\nexport default AttachmentsTransform.extend({\n  deserialize: function(serialized) {\n    return this._super(serialized).pop();\n  },\n  serialize: function(deserialized) {\n    if (isNone(deserialized)) { return null; }\n    return this._super([deserialized]);\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-pouch/node_modules/ember-pouch/addon/transforms/attachments.js":"import Ember from 'ember';\nimport DS from 'ember-data';\n\nconst {\n  get,\n  isNone\n} = Ember;\nconst keys = Object.keys || Ember.keys;\n\nexport default DS.Transform.extend({\n  deserialize: function(serialized) {\n    if (isNone(serialized)) { return []; }\n\n    return keys(serialized).map(function (attachmentName) {\n      let attachment = serialized[attachmentName];\n      return Ember.Object.create({\n        name: attachmentName,\n        content_type: attachment.content_type,\n        data: attachment.data,\n        stub: attachment.stub,\n        length: attachment.length,\n        digest: attachment.digest,\n      });\n    });\n  },\n\n  serialize: function(deserialized) {\n    if (!Ember.isArray(deserialized)) { return null; }\n\n    return deserialized.reduce(function (acc, attachment) {\n      const serialized = {\n        content_type: get(attachment, 'content_type'),\n      };\n      if (get(attachment, 'stub')) {\n        serialized.stub = true;\n        serialized.length = get(attachment, 'length');\n        serialized.digest = get(attachment, 'digest');\n      }\n      else {\n        serialized.data = get(attachment, 'data');\n        serialized.length = get(attachment, 'length');\n      }\n      acc[get(attachment, 'name')] = serialized;\n      return acc;\n    }, {});\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-pouch/node_modules/ember-pouch/app/transforms/attachment.js":"export { default } from 'ember-pouch/transforms/attachment';\n","/home/travis/build/npmtest/node-npmtest-ember-pouch/node_modules/ember-pouch/app/transforms/attachments.js":"export { default } from 'ember-pouch/transforms/attachments';\n"}